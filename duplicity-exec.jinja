#!/bin/bash
#
# vim: ft=sh

# Exit on error
set -o nounset
set -o errexit

if [ $# -lt 1 ]; then
  >&2 echo "Usage: $0 <duplicity command>"
  exit 1
fi

PIDFILE="/run/duplicity-exec.pid"
if [ -e "$PIDFILE" ]; then
  >&2 echo 'Duplicity already running'
  exit 1
fi

# Backend configuration
export PASSPHRASE='{{ passphrase }}'

{% if aws_access_key_id != None -%}
export AWS_ACCESS_KEY_ID='{{ aws_access_key_id }}'
export AWS_SECRET_ACCESS_KEY='{{ aws_secret_access_key }}'
export S3_USE_SIGV4=true # Use new signature version 4
{%- endif %}

DUPLICITY_ARGUMENTS=(--tempdir "{{ tempdir }}" --archive-dir "{{ archive_dir }}" {% if args != None %}{{ args }} {% endif %}'{{ backend }}')

# Create directories
mkdir -p "{{ tempdir }}"
mkdir -p "{{ archive_dir }}"

# Make sure HOME is set (used to get the correct SSH keys, etc)
export HOME=/root

# Touch pidfile, remove it on exit/ error
touch "$PIDFILE"
function finish {
  >&2 echo 'Removing pidfile'
  rm -rf "$PIDFILE"

  # Unset all passphrases
  {% if aws_access_key_id != None -%}
  unset AWS_ACCESS_KEY_ID
  unset AWS_SECRET_ACCESS_KEY
  {%- endif %}

  unset PASSPHRASE
}
trap finish EXIT

# Run duplicity command
# The restore and verify commands need the source_url argument last
cmd=$1
case $cmd in
  verify|restore)
  shift
  duplicity $cmd ${DUPLICITY_ARGUMENTS[@]} "$@"
  ;;

  *)
  duplicity "$@" ${DUPLICITY_ARGUMENTS[@]}
  ;;
esac

# Clean temporary directories to avoid pile up over time
rm -rf "{{ tempdir }}"
rm -rf "{{ archive_dir }}"
